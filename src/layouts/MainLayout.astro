---
import FallbackNotice from '../components/FallbackNotice.astro';
import ArticleNavigationButton from '../components/PageContent/ArticleNavigationButton.astro';
import PageContent from '../components/PageContent/PageContent.astro';
import RightSidebar from '../components/RightSidebar/RightSidebar.astro';
import TableOfContents from '../components/RightSidebar/TableOfContents';
import { normalizeLangTag } from '../i18n/bcp-normalize';
import { rtlLanguages } from '../i18n/languages';
import { useTranslations } from '../i18n/util';
import { getLanguageFromURL } from '../util';
import { getNavLinks } from '../util/getNavLinks';
import BaseLayout from './BaseLayout.astro';

const { content = {}, hideRightSidebar = false } = Astro.props;
const headings = content.astro?.headings;
const isFallback = !!Astro.params.fallback;
const currentPage = Astro.url.pathname;
const lang = getLanguageFromURL(currentPage);
const direction = rtlLanguages.has(lang) ? 'rtl' : 'ltr';
const bcpLang = normalizeLangTag(lang);
const t = useTranslations(Astro);
const { previous, next } = await getNavLinks(Astro);
const filePath = `src/pages${currentPage.replace(/\/$/, '')}.md`;
const currentFile = isFallback ? filePath.replace(`/${lang}/`, '/en/') : filePath;
const githubEditUrl =
	content.githubURL && (lang === 'en' || isFallback)
		? `${content.githubURL}${content.hasREADME ? 'README.md' : ''}`
		: `https://github.com/withastro/docs/blob/main/${currentFile}`;
// Ensures the canonicalURL always has an trailing slash.
const canonicalURL = new URL(currentPage.replace(/([^/])$/, '$1/'), Astro.site);
if (isFallback) canonicalURL.pathname = canonicalURL.pathname.replace(`/${lang}/`, '/en/');
---

<BaseLayout {...Astro.props}>
	{
		!hideRightSidebar && (
			<RightSidebar slot="secondary-sidebar" content={content} githubEditUrl={githubEditUrl} />
		)
	}
	<div dir={isFallback ? 'ltr' : direction} lang={isFallback && 'en'}>
		{
			// For best cross-browser support of sticky or fixed elements, they must not be nested
			// inside elements that hide any overflow axis. The article content hides `overflow-x`,
			// so we must place the mobile TOC here.
			headings && (
				<nav class="mobile-toc" dir={direction}>
					<TableOfContents
						client:media="(max-width: 72em)"
						headings={headings}
						labels={{
							onThisPage: t('rightSidebar.onThisPage'),
							overview: t('rightSidebar.overview'),
						}}
						isMobile={true}
					/>
				</nav>
			)
		}
		<div class="content">
			<PageContent {...{content}}>
				<slot name="header" />
				{
					isFallback && (
						<div lang={bcpLang} dir={direction}>
							<FallbackNotice />
						</div>
					)
				}
				<slot />
				{
					(previous || next) && (
						<aside class="next-previous-nav" slot="footer">
							{previous && <ArticleNavigationButton rel="prev" item={previous} />}
							{next && <ArticleNavigationButton rel="next" item={next} />}
						</aside>
					)
				}
			</PageContent>
		</div>
	</div>
</BaseLayout>

<style>
	.mobile-toc {
		display: block;
		position: fixed;
		inset-inline: 0;
		top: calc(var(--theme-navbar-height));
		z-index: 2;
	}
	@media (min-width: 50em) {
		.mobile-toc {
			inset-inline-start: var(--theme-left-sidebar-width);
			margin-top: 0;
		}
	}

	.content {
		padding-top: var(--theme-mobile-toc-height);
	}

	@media (min-width: 72em) {
		.mobile-toc {
			display: none;
		}

		.content {
			padding-top: 0;
		}
	}

	.next-previous-nav {
		display: flex;
		flex-wrap: wrap;
		width: auto;
		gap: 1rem;
		margin-bottom: 1.5rem;
	}
</style>
