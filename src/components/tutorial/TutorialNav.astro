---
import { getTutorialPages } from '../../util/getTutorialPages';
import { getLanguageFromURL } from '../../util';

const lang = getLanguageFromURL(Astro.url.pathname);
const tutorialPages = getTutorialPages(await Astro.glob(`../../pages/*/tutorial/**/*.md`), lang);

const units = tutorialPages.reduce((units, page) => {
	if (page.frontmatter.sectionTitle) {
		units.push({
			title: page.frontmatter.sectionTitle,
			lessons: [page],
		});
	} else {
		units.at(-1)?.lessons.push(page);
	}
	return units;
}, [] as { title: string; lessons: typeof tutorialPages }[]);
---

<nav>
	<ol class="units">
		{
			units.map((unit) => (
				<li>
					<h2 class="heading">{unit.title}</h2>
					<ol class="lessons">
						{unit.lessons.map((lesson) => (
							<li
								class:list={[
									'header-link',
									{ active: Astro.url.pathname.replace(/\/$/, '') === lesson.url },
								]}
							>
								<a
									href={`/${lang}/${lesson.slug}/`}
									aria-current={Astro.url.pathname.replace(/\/$/, '') === lesson.url}
								>
									{lesson.frontmatter.title}
								</a>
							</li>
						))}
					</ol>
				</li>
			))
		}
	</ol>
</nav>

<style>
	nav {
		width: 100%;
		padding: var(--doc-padding-block) 0;
		overflow: auto;
		font-size: var(--theme-text-xs);
	}

	.units {
		padding-inline-start: 0;
		padding-inline-end: 0.5rem;
		list-style: none;
	}

	.lessons {
		padding-inline-start: 1.3rem;
		list-style: none;
	}

	.heading {
		font-size: var(--theme-text-xs);
	}

	a[aria-current='true'] {
		color: var(--theme-text);
	}

	.active {
		border-color: var(--theme-accent-secondary);
	}
</style>
